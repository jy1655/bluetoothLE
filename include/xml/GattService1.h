
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__GattService1_h__adaptor__H__
#define __sdbuscpp__GattService1_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class GattService1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.GattService1";

protected:
    GattService1_adaptor(sdbus::IObject& object)
        : m_object(object)
    {
    }

    GattService1_adaptor(const GattService1_adaptor&) = delete;
    GattService1_adaptor& operator=(const GattService1_adaptor&) = delete;
    GattService1_adaptor(GattService1_adaptor&&) = delete;
    GattService1_adaptor& operator=(GattService1_adaptor&&) = delete;

    ~GattService1_adaptor() = default;

    void registerAdaptor()
    {
        m_object.addVTable( sdbus::registerProperty("UUID").withGetter([this](){ return this->UUID(); })
                          , sdbus::registerProperty("Primary").withGetter([this](){ return this->Primary(); })
                          , sdbus::registerProperty("Includes").withGetter([this](){ return this->Includes(); })
                          , sdbus::registerProperty("Handle").withGetter([this](){ return this->Handle(); }).withSetter([this](const uint16_t& value){ this->Handle(value); })
                          ).forInterface(INTERFACE_NAME);
    }

private:
    virtual std::string UUID() = 0;
    virtual bool Primary() = 0;
    virtual std::vector<sdbus::ObjectPath> Includes() = 0;
    virtual uint16_t Handle() = 0;
    virtual void Handle(const uint16_t& value) = 0;

private:
    sdbus::IObject& m_object;
};

}} // namespaces

#endif
