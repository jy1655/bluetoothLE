
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__GattDescriptor1_h__adaptor__H__
#define __sdbuscpp__GattDescriptor1_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class GattDescriptor1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.GattDescriptor1";

protected:
    GattDescriptor1_adaptor(sdbus::IObject& object)
        : m_object(object)
    {
    }

    GattDescriptor1_adaptor(const GattDescriptor1_adaptor&) = delete;
    GattDescriptor1_adaptor& operator=(const GattDescriptor1_adaptor&) = delete;
    GattDescriptor1_adaptor(GattDescriptor1_adaptor&&) = delete;
    GattDescriptor1_adaptor& operator=(GattDescriptor1_adaptor&&) = delete;

    ~GattDescriptor1_adaptor() = default;

    void registerAdaptor()
    {
        m_object.addVTable( sdbus::registerMethod("ReadValue").withInputParamNames("options").withOutputParamNames("value").implementedAs([this](const std::map<std::string, sdbus::Variant>& options){ return this->ReadValue(options); })
                          , sdbus::registerMethod("WriteValue").withInputParamNames("value", "options").implementedAs([this](const std::vector<uint8_t>& value, const std::map<std::string, sdbus::Variant>& options){ return this->WriteValue(value, options); })
                          , sdbus::registerProperty("UUID").withGetter([this](){ return this->UUID(); })
                          , sdbus::registerProperty("Characteristic").withGetter([this](){ return this->Characteristic(); })
                          , sdbus::registerProperty("Value").withGetter([this](){ return this->Value(); })
                          , sdbus::registerProperty("Flags").withGetter([this](){ return this->Flags(); })
                          , sdbus::registerProperty("Handle").withGetter([this](){ return this->Handle(); }).withSetter([this](const uint16_t& value){ this->Handle(value); })
                          ).forInterface(INTERFACE_NAME);
    }

private:
    virtual std::vector<uint8_t> ReadValue(const std::map<std::string, sdbus::Variant>& options) = 0;
    virtual void WriteValue(const std::vector<uint8_t>& value, const std::map<std::string, sdbus::Variant>& options) = 0;

private:
    virtual std::string UUID() = 0;
    virtual sdbus::ObjectPath Characteristic() = 0;
    virtual std::vector<uint8_t> Value() = 0;
    virtual std::vector<std::string> Flags() = 0;
    virtual uint16_t Handle() = 0;
    virtual void Handle(const uint16_t& value) = 0;

private:
    sdbus::IObject& m_object;
};

}} // namespaces

#endif
