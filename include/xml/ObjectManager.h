
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__ObjectManager_h__adaptor__H__
#define __sdbuscpp__ObjectManager_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace DBus {

class ObjectManager_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.DBus.ObjectManager";

protected:
    ObjectManager_adaptor(sdbus::IObject& object)
        : m_object(object)
    {
    }

    ObjectManager_adaptor(const ObjectManager_adaptor&) = delete;
    ObjectManager_adaptor& operator=(const ObjectManager_adaptor&) = delete;
    ObjectManager_adaptor(ObjectManager_adaptor&&) = delete;
    ObjectManager_adaptor& operator=(ObjectManager_adaptor&&) = delete;

    ~ObjectManager_adaptor() = default;

    void registerAdaptor()
    {
        m_object.addVTable( sdbus::registerMethod("GetManagedObjects").withOutputParamNames("objects").implementedAs([this](){ return this->GetManagedObjects(); })
                          , sdbus::registerSignal("InterfacesAdded").withParameters<sdbus::ObjectPath, std::map<std::string, std::map<std::string, sdbus::Variant>>>("object", "interfaces")
                          , sdbus::registerSignal("InterfacesRemoved").withParameters<sdbus::ObjectPath, std::vector<std::string>>("object", "interfaces")
                          ).forInterface(INTERFACE_NAME);
    }

public:
    void emitInterfacesAdded(const sdbus::ObjectPath& object, const std::map<std::string, std::map<std::string, sdbus::Variant>>& interfaces)
    {
        m_object.emitSignal("InterfacesAdded").onInterface(INTERFACE_NAME).withArguments(object, interfaces);
    }

    void emitInterfacesRemoved(const sdbus::ObjectPath& object, const std::vector<std::string>& interfaces)
    {
        m_object.emitSignal("InterfacesRemoved").onInterface(INTERFACE_NAME).withArguments(object, interfaces);
    }

private:
    virtual std::map<sdbus::ObjectPath, std::map<std::string, std::map<std::string, sdbus::Variant>>> GetManagedObjects() = 0;

private:
    sdbus::IObject& m_object;
};

}}} // namespaces

#endif
